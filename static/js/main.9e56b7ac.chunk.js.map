{"version":3,"sources":["app/Components/SearchMenu/index.module.scss","app/Components/MainMenu/index.module.scss","app/Components/Folders/index.module.scss","app/Components/EditMenu/index.module.scss","app/Components/DropZone/index.module.scss","app/Components/CustomAlert/index.module.scss","app/common/utils.ts","redux/selectors/index.ts","api/api.ts","app/common/notifications.tsx","redux/reducers/uploadSlice-reducer.ts","app/common/folderTree.ts","redux/reducers/foldersSlice-reducer.ts","redux/reducers/mainPageSlice-reducer.ts","app/common/hooks.ts","app/Components/Header/index.tsx","app/Components/KeywordsMenu/index.tsx","app/Components/MainMenu/index.tsx","app/Components/FolderTree/index.tsx","app/Components/Folders/index.tsx","app/Components/DropZone/index.tsx","app/Components/Gallery/index.tsx","app/Components/EditMenu/index.tsx","app/Components/CustomAlert/index.tsx","app/Components/SearchMenu/index.tsx","app/Pages/UploadPage/index.tsx","app/Components/PaginationMenu/index.tsx","app/Pages/MainPage/index.tsx","App.tsx","serviceWorker.ts","redux/store/rootReducer.ts","redux/store/store.ts","index.tsx","app/Components/Gallery/index.module.scss"],"names":["module","exports","dateFormat","copyByJSON","compose","obj","JSON","parse","stringify","removeExtraSlash","value","endsWith","slice","removeExtraFirstSlash","startsWith","getLastItem","list","length","getNameParts","fullName","separatedNameArr","split","shortName","join","ext","getNameObj","getUpdatedExifFieldsObj","exifList","tempPath","DateTimeOriginal","exifObj","originalDate","moment","format","keywords","Keywords","megapixels","Megapixels","updateFilesArrItemByField","fieldName","filesArr","updatingFieldsObj","map","item","renameShortNames","namePartArr","strArr","countSrtObj","reduce","accum","curValue","numberOf","inc","countSrtObjWithoutUniqWords","reject","mapAccumRight","newValue","dec","newAccum","additionalNumber","toString","padStart","renameEqualStrings","i","getRenamedObjects","newFilesArr","fileNameParts","name","renamedNameParts","removeIntersectingKeywords","sameKeywords","without","addKeywordsToAllFiles","newKeywords","union","updateFilesArrayItems","uniqField","originalFilesArr","file","originalUniqField","find","getSameKeywords","selectedList","filterIndexed","addIndex","filter","keywordsArrays","previousValue","currentValue","intersection","bom","index","includes","convertDownloadingRawObjectArr","rawArr","downLoadingRawObj","originalName","mimetype","omit","type","convertDownLoadingRawObj","getFilePathWithoutName","fullPath","folderElement","state","folderReducer","pathsArr","upload","uploadReducer","uploadingFiles","main","mainPageReducer","downloadingFiles","pagination","galleryPagination","pathsArrOptionsSelector","createSelector","path","uploadPageGalleryPropsSelector","openMenus","fullExifFilesList","imageArr","dPageGalleryPropsSelector","dSelectedList","dOpenMenus","allUploadKeywordsSelector","allDownloadingKeywordsSelector","allSameKeywordsSelector","dAllSameKeywordsSelector","instance","axios","create","baseURL","headers","mainApi","sendPhotos","files","post","updatePhotos","put","sendPhoto","formData","FormData","append","getKeywordsList","get","getPathsList","getKeywordsFromPhoto","getPhotosByTags","page","perPage","searchTags","excludeTags","folderPath","params","errorMessage","error","message","duration","notification","description","undefined","uploadSlice","createSlice","initialState","isExifLoading","uploadingStatus","reducers","addUploadingFile","action","push","payload","updateUploadingFilesArr","addFullExifFile","fullExifObj","updateFullExifFile","addToSelectedList","set","Set","add","Array","from","removeFromSelectedList","delete","clearSelectedList","selectAll","_","updateOpenMenus","removeFromOpenMenus","clearUploadingState","setLoading","setUploadingStatus","actions","fetchFullExif","tempPathArr","dispatch","getState","a","api","then","data","getUpdatingObj","curry","loadExifToUploadingFiles","acc","loadUpdatingObjToFilesArr","uploadingFilesArr","keys","catch","createKeyForFolderTree","key","keyArr","getKeyFromSibling","createChildrenIfNeeded","foundItem","titlesArr","children","title","childTitle","addChildToTreeElem","addSiblingIfNeeded","tree","some","treeItem","addSiblingToTree","addFolderToFolderTree","getNewFolderTree","subTree","getFolderPathFromTreeKey","result","targetKey","getFoundElementPath","updateFolderTree","folderTree","cleanFolderPath","folderSlice","currentFolderPath","keywordsList","setFolderTree","setCurrentFolderPath","setPathsArr","setKeywordsList","fetchPathsList","paths","rawFiles","currentPage","nPerPage","resultsCount","totalPages","isGalleryLoading","setRawFiles","setDownloadingFiles","addToDSelectedList","current","removeFromDSelectedList","updateDOpenMenus","clearDSelectedList","selectAllD","setSearchTags","setExcludeTags","setGalleryPagination","clearDownloadingState","setDLoading","setDGalleryLoading","fetchPhotos","curSearchTags","isEmpty","curExcludeTags","curFolderPath","searchPagination","finally","updatedObjArr","addNewPathsArr","newPathsArr","sortBy","identity","originalFolderTree","addPathsArrToFolderTree","response","newFilePath","Error","success","console","log","useCurrentPage","isUploadingPage","useLocation","pathname","isMainPage","currentPageNumber","useMemo","useUpdateFields","useDispatch","useSelector","isExifExist","updateOne","updateAll","load","updateUploadingFiles","all","Promise","resolve","HeaderLayout","Layout","Header","Title","Typography","directoriesArr","useEffect","className","theme","mode","defaultSelectedKeys","Item","to","KeywordsMenu","removeKeyword","closable","onClose","Sider","SubMenu","Menu","MainMenu","openKeys","updateKeywords","uniqKeywords","removeFiles","allKeywords","useState","isKeywordsMenuLoading","setIsKeywordsMenuLoading","handleTitleClick","openKeysSet","has","KeywordsMenuWrapper","cn","styles","keywordsMenuWrapper","tip","sider","width","menu","defaultOpenKeys","icon","SearchOutlined","onTitleClick","UserOutlined","EditFilled","CreditCardFilled","clearAll","isEditMany","ProfileOutlined","disabled","onClick","uploadFiles","DirectoryTree","Tree","FolderTree","onSelect","getFolderPathFromTree","treeData","Folders","options","isButtonAddDisabled","folderWrapper","label","defaultValue","onChange","filterOption","inputValue","option","toUpperCase","indexOf","plusIcon","shape","PlusOutlined","Dragger","Upload","DropZone","isEditOne","props","accept","dropZone","active","multiple","showUploadList","customRequest","info","changeDate","lastModified","size","preview","status","fileList","InboxOutlined","Gallery","updateFiles","isLoading","currentTempPath","setCurrentTempPath","showModal","setShowModal","showImageModal","setShowImageModal","showVideo","setShowVideo","showPlayButton","setShowPlayButton","showFullscreenButton","setShowFullscreenButton","currentImage","setCurrentImage","galleryArr","setGalleryArr","isEditMenu","isTemplateMenu","exif","handlePlay","videoItem","useCallback","originalPath","url","id","iframeStyles","position","playButton","src","alt","thumbnail","original","renderItem","spinner","spinning","wrapper","pointer","updateFilesArr","handleImageClick","imgInfo","style","imgName","marginLeft","e","stopPropagation","getExif","img","footer","visible","onCancel","wrapClassName","centered","items","slideDuration","slideInterval","startIndex","showThumbnails","onSlide","currentIndex","showIndex","Option","Select","initialFileObject","filePath","isName","isOriginalDate","isFilePath","isKeywords","duplicateConfig","content","emptyCheckboxesConfig","getNewFilePath","newName","preparedFilePath","EditMenu","Form","useForm","form","Modal","useModal","modal","contextHolder","pathsListOptions","currentFilePath","setCurrentFilePath","isSelectAllBtn","setIsSelectAllBtn","editUploadingFiles","updatingAction","selectedFilesArr","idx","selectedFilesWithoutSameKeywords","AddEditedFieldsToFilteredFileArr","editedFields","mixUpdatedFilesItemsWithOriginalOnes","useEditFilesArr","disabledInputs","getFilePath","setFieldsValue","fetchUpdatedFiles","currentName","currentOriginalDate","checkboxes","selectedFiles","_id","newNamesArr","newKeywordsArr","getFilesWithUpdatedKeywords","getUpdatedFields","updatedFiles","updatedFields","onFinish","newOriginalDate","isDuplicateName","needModalIsDuplicate","isEmptyCheckboxes","warning","preparedValue","field","updateValues","gutter","span","offset","textAlign","valuePropName","placeholder","allowClear","extension","keyword","marginRight","htmlType","loading","CustomAlert","hide","alert","InfoCircleFilled","showIcon","SearchMenu","searchKeywordsList","difference","excludeKeywordsList","select","Content","statusMessage","empty","UploadPage","mainGalleryProps","galleryProps","mainMenuProps","filesArrWithoutKeyword","ResultComponent","validStatus","PaginationMenu","margin","total","showTotal","pageSize","showSizeChanger","pageSizeOptions","paginationObj","MainPage","isFilesLoaded","setIsFilesLoaded","App","exact","component","Boolean","window","location","hostname","test","rootReducer","combineReducers","foldersSliceReducer","uploadSliceReducer","mainPageSliceReducer","store","configureStore","reducer","ReactDOM","render","document","querySelector","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9e56b7ac.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"SearchMenu_wrapper__2vmIX\",\"title\":\"SearchMenu_title__1N2wc\",\"select\":\"SearchMenu_select__RUOgL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sider\":\"MainMenu_sider__1dgcG\",\"menu\":\"MainMenu_menu__2qS9s\",\"keywordsMenuWrapper\":\"MainMenu_keywordsMenuWrapper__38MV-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"folderWrapper\":\"Folders_folderWrapper__3lCdj\",\"label\":\"Folders_label__t92FN\",\"plusIcon\":\"Folders_plusIcon__W5-Yt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"EditMenu_item__19rVS\",\"itemWidth\":\"EditMenu_itemWidth__3oZad\",\"extension\":\"EditMenu_extension__3PUWD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dropZone\":\"DropZone_dropZone__21dpH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"alert\":\"CustomAlert_alert__24dHy\"};","import moment from 'moment'\nimport {\n  addIndex,\n  compose,\n  dec,\n  filter,\n  inc,\n  includes,\n  intersection,\n  isEmpty,\n  map,\n  mapAccumRight,\n  omit,\n  reject,\n  union,\n  without,\n} from 'ramda'\nimport { ResultStatusType } from 'antd/lib/result'\n\nimport {\n  DownloadingObject,\n  DownloadingRawObject,\n  ExifFilesList,\n  Keywords,\n  LoadingStatus,\n  NameParts,\n  UpdatingFieldsWithPath,\n  UploadingObject,\n} from '../../redux/types'\n\nexport const dateFormat = 'YYYY.MM.DD'\n\nexport const invokableCompose = <any>compose\nexport const copyByJSON = (obj: any) => JSON.parse(JSON.stringify(obj))\nexport const removeExtraSlash = (value: string): string => (value.endsWith('/') ? value.slice(0, -1) : value)\nexport const removeExtraFirstSlash = (value: string): string => (value.startsWith('/') ? value.slice(1) : value)\n// Todo: use R.last instead\nexport const getLastItem = (list: number[]): number => list[list.length - 1]\nexport const removeEmptyFields = (obj: Record<string, any>) => reject(field => !field)(obj)\nexport const formatDateTimeOriginal = (DateTimeOriginal: string) =>\n  moment(DateTimeOriginal, 'YYYY:MM:DD hh:mm:ss').format(dateFormat)\n\nexport const getNameParts = (fullName: string): NameParts => {\n  const getNameObj = (fullName: string) => {\n    const separatedNameArr = fullName.split('.')\n    const shortName = separatedNameArr.slice(0, -1).join('.')\n    const ext = '.' + separatedNameArr[separatedNameArr.length - 1]\n    return { shortName, ext }\n  }\n  const isValidName = fullName && fullName !== '-'\n  return isValidName ? getNameObj(fullName) : { shortName: '-', ext: '' }\n}\n\nexport const getTempPath = (filesArr: UploadingObject[], index: number): string => filesArr[index].tempPath\nexport const isExifExist = (exifList: ExifFilesList, tempPath: string): boolean => !!exifList[tempPath]\n\nexport const getUpdatedExifFieldsObj = (exifList: ExifFilesList, tempPath: string): UpdatingFieldsWithPath => {\n  const exifObj = exifList[tempPath]\n  const originalDate = exifObj?.DateTimeOriginal ? formatDateTimeOriginal(exifObj?.DateTimeOriginal as string) : '-'\n  return {\n    keywords: exifObj?.Keywords || null,\n    megapixels: exifObj?.Megapixels || '',\n    originalDate,\n    tempPath,\n  }\n}\n\nexport const updateFilesArrItemByField = (\n  fieldName: keyof UploadingObject,\n  filesArr: UploadingObject[],\n  updatingFieldsObj: { [key: string]: any }\n): UploadingObject[] => {\n  return filesArr.map(item => {\n    const isEqualFileName = item[fieldName] === updatingFieldsObj[fieldName]\n    return isEqualFileName ? { ...item, ...updatingFieldsObj } : item\n  })\n}\n\nexport const renameEqualStrings = (strArr: string[]) => {\n  const count = (accum: Record<string, number>, curValue: string) => {\n    const numberOf = accum[curValue] ? inc(accum[curValue]) : 1\n    return { ...copyByJSON(accum), [curValue]: numberOf }\n  }\n\n  const arrCreator = (accum: Record<string, number>, curValue: string): [Record<string, number>, string] => {\n    const newValue = accum[curValue] ? dec(accum[curValue]) : curValue\n    const newAccum = { ...copyByJSON(accum), [curValue]: newValue }\n    const additionalNumber = accum[curValue] ? `_${accum[curValue].toString().padStart(3, '0')}` : ''\n    return [newAccum, `${curValue}${additionalNumber}`]\n  }\n\n  const isUniq = (numberOf: number): boolean => numberOf === 1\n\n  const countSrtObj = strArr.reduce(count, {})\n  const countSrtObjWithoutUniqWords = reject(isUniq, countSrtObj)\n  const newStrArr = mapAccumRight(arrCreator, countSrtObjWithoutUniqWords, strArr)\n  return newStrArr[1]\n}\n\nexport const renameShortNames = (namePartArr: NameParts[]): NameParts[] => {\n  const shortNames = namePartArr.map(({ shortName }) => shortName)\n  const renamedShortNames = renameEqualStrings(shortNames)\n  return renamedShortNames.map((item, i) => ({ shortName: item, ext: namePartArr[i].ext }))\n}\n\nexport const getRenamedObjects = <T extends { name: string }>(filesArr: T[]): T[] => {\n  const newFilesArr: T[] = copyByJSON(filesArr)\n  const fileNameParts: NameParts[] = newFilesArr.map(({ name }) => getNameParts(name))\n  const renamedNameParts = renameShortNames(fileNameParts)\n  return newFilesArr.map((item, i) => {\n    const { shortName, ext } = renamedNameParts[i]\n    return { ...item, name: shortName + ext }\n  })\n}\n\nexport const removeIntersectingKeywords = <T extends { keywords: Keywords }>(\n  sameKeywords: string[],\n  filesArr: T[]\n): T[] => {\n  return filesArr.map(item => {\n    return { ...item, keywords: without(sameKeywords, item.keywords || []) }\n  })\n}\n\nexport const addKeywordsToAllFiles = <T extends { keywords: Keywords }>(newKeywords: string[], filesArr: T[]): T[] => {\n  return filesArr.map(item => {\n    return { ...item, keywords: union(newKeywords, item.keywords || []) }\n  })\n}\n\nexport const updateFilesArrayItems = <T extends Record<string, any>>(\n  uniqField: keyof T,\n  originalFilesArr: T[],\n  newFilesArr: T[]\n): T[] => {\n  const findUpdatedObj = (originalUniqField: string) => newFilesArr.find(file => file[uniqField] === originalUniqField)\n  return originalFilesArr.map(file => findUpdatedObj(file[uniqField]) || file)\n}\n\nexport const isValidResultStatus = (status: LoadingStatus): ResultStatusType | null => {\n  return status !== 'empty' && status !== 'loading' ? status : null\n}\n\nexport const getSameKeywords = (\n  filesArr: UploadingObject[] | DownloadingObject[],\n  selectedList: number[]\n): string[] => {\n  const filterIndexed = addIndex(filter)\n  const getIntersectionArr = (keywordsArrays: string[][]) => {\n    return keywordsArrays.length\n      ? keywordsArrays.reduce((previousValue, currentValue): string[] => intersection(previousValue, currentValue))\n      : []\n  }\n\n  return compose<UploadingObject[], UploadingObject[], string[][], string[]>(\n    getIntersectionArr,\n    map((item: UploadingObject) => item.keywords || []),\n    filterIndexed((bom, index) => includes(index, selectedList))\n  )(filesArr)\n}\n\nexport const convertDownLoadingRawObj = (downLoadingRawObj: DownloadingRawObject): DownloadingObject => {\n  const { originalName, mimetype } = downLoadingRawObj\n  return { ...omit(['mimetype', 'originalName'], downLoadingRawObj), name: originalName, type: mimetype }\n}\n\nexport const convertDownloadingRawObjectArr = (rawArr: DownloadingRawObject[]): DownloadingObject[] => {\n  return rawArr.map(item => convertDownLoadingRawObj(item))\n}\n\nexport const getFilesWithUpdatedKeywords = <T extends { keywords: Keywords }>(\n  filesArr: T[],\n  keywords: string[]\n): T[] => {\n  const newFilesArr = copyByJSON(filesArr)\n  return isEmpty(keywords) ? newFilesArr : addKeywordsToAllFiles(keywords, newFilesArr)\n}\n\nexport const getFilePathWithoutName = (fullPath: string): string => {\n  return fullPath.split('/').slice(0, -1).join('/')\n}\n","import { createSelector } from 'reselect'\nimport { compose, map, reduce, union } from 'ramda'\n\nimport { RootState } from '../store/rootReducer'\nimport { UploadingObject } from '../types'\nimport { getSameKeywords } from '../../app/common/utils'\n\nexport const folderElement = (state: RootState) => state.folderReducer\nexport const pathsArr = (state: RootState) => state.folderReducer.pathsArr // TODO: used only in another selector\nexport const upload = (state: RootState) => state.uploadReducer\nexport const openMenus = (state: RootState) => state.uploadReducer.openMenus\nexport const uploadingFiles = (state: RootState) => state.uploadReducer.uploadingFiles\nexport const selectedList = (state: RootState) => state.uploadReducer.selectedList\nexport const main = (state: RootState) => state.mainPageReducer\nexport const downloadingFiles = (state: RootState) => state.mainPageReducer.downloadingFiles\nexport const dSelectedList = (state: RootState) => state.mainPageReducer.dSelectedList\nexport const pagination = (state: RootState) => state.mainPageReducer.galleryPagination\n\nexport const pathsArrOptionsSelector = createSelector(pathsArr, pathsArr => pathsArr.map(path => ({ value: path })))\n\nexport const uploadPageGalleryPropsSelector = createSelector(\n  upload,\n  ({ uploadingFiles, selectedList, openMenus, fullExifFilesList }) => ({\n    openMenus,\n    selectedList,\n    fullExifFilesList,\n    imageArr: uploadingFiles,\n  })\n)\n\nexport const dPageGalleryPropsSelector = createSelector(\n  main,\n  upload,\n  ({ downloadingFiles, dSelectedList, dOpenMenus }, { fullExifFilesList }) => ({\n    openMenus: dOpenMenus,\n    selectedList: dSelectedList,\n    fullExifFilesList,\n    imageArr: downloadingFiles,\n  })\n)\n\n//Todo: get rid of duplicated code\nexport const allUploadKeywordsSelector = createSelector(uploadingFiles, uploadingFiles => {\n  const getUniqArr = (keywordsArrays: string[][]) => reduce<string[], string[]>(union, [], keywordsArrays)\n  return compose(\n    getUniqArr,\n    map((item: UploadingObject) => item.keywords || [])\n  )(uploadingFiles)\n})\n\nexport const allDownloadingKeywordsSelector = createSelector(downloadingFiles, downloadingFiles => {\n  const getUniqArr = (keywordsArrays: string[][]) => reduce<string[], string[]>(union, [], keywordsArrays)\n  return compose(\n    getUniqArr,\n    map((item: UploadingObject) => item.keywords || [])\n  )(downloadingFiles)\n})\n\nexport const allSameKeywordsSelector = createSelector(uploadingFiles, selectedList, (uploadingFiles, selectedList) => {\n  return getSameKeywords(uploadingFiles, selectedList)\n})\n\nexport const dAllSameKeywordsSelector = createSelector(\n  downloadingFiles,\n  dSelectedList,\n  (downloadingFiles, dSelectedList) => {\n    return getSameKeywords(downloadingFiles, dSelectedList)\n  }\n)\n","import axios, { AxiosResponse } from 'axios'\n\nimport {\n  AxiosPreviews,\n  ExifFilesList,\n  FetchingGalleryContent,\n  UpdatedObject,\n  UpdatePhotosRequest,\n  UploadingObject,\n} from '../redux/types'\n\nconst instance = axios.create({\n  baseURL: 'http://localhost:5000',\n  headers: {\n    'Content-Type': 'multipart/form-data',\n  },\n})\n\nconst mainApi = {\n  sendPhotos(files: UploadingObject[], path: string): Promise<AxiosResponse<string>> {\n    return instance.post(`/upload?path=${path}`, files, {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n  },\n\n  updatePhotos(files: UpdatedObject[]): Promise<AxiosResponse<UpdatePhotosRequest>> {\n    return instance.put('/update', files, {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n  },\n\n  sendPhoto(file: any): Promise<AxiosResponse<AxiosPreviews>> {\n    const formData = new FormData()\n    formData.append('filedata', file)\n\n    return instance.post('/uploadItem', formData)\n  },\n\n  getKeywordsList(): Promise<AxiosResponse<string[]>> {\n    return instance.get('/keywords')\n  },\n\n  getPathsList(): Promise<AxiosResponse<string[]>> {\n    return instance.get('/paths')\n  },\n\n  getKeywordsFromPhoto(tempPath: string[]): Promise<AxiosResponse<ExifFilesList>> {\n    // need to get something even if exif is not exist\n    return instance.post('/image-exif', tempPath, {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n  },\n\n  getPhotosByTags(\n    page: number,\n    perPage: number,\n    searchTags: string[] | undefined,\n    excludeTags: string[] | undefined,\n    folderPath: string | undefined\n  ): Promise<AxiosResponse<FetchingGalleryContent>> {\n    const params = { page, perPage, searchTags, excludeTags, folderPath }\n    return instance.post('/filtered-photos', params, {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n  },\n}\n\nexport default mainApi\n","import { notification } from 'antd'\n\nexport const errorMessage = (error: Error, message: string, duration?: number) => {\n  notification.error({\n    message: message,\n    description: error.message,\n    duration: duration === undefined ? 4.5 : duration,\n  })\n}\n\nexport const successMessage = (description: string) => {\n  notification.success({\n    message: 'Success',\n    description,\n  })\n}\n","/* eslint functional/immutable-data: 0 */\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { compose, curry, keys, reduce } from 'ramda'\n\nimport { AppThunk } from '../store/store'\nimport api from '../../api/api'\nimport { errorMessage } from '../../app/common/notifications'\nimport { ExifFilesList, FullExifObj, LoadingStatus, UploadingObject } from '../types'\nimport { getUpdatedExifFieldsObj, updateFilesArrItemByField } from '../../app/common/utils'\n\ninterface FullExifPayload {\n  tempPath: string\n  fullExifObj: FullExifObj\n}\n\ninterface State {\n  uploadingFiles: UploadingObject[]\n  fullExifFilesList: ExifFilesList\n  selectedList: number[]\n  openMenus: string[]\n  isExifLoading: boolean\n  uploadingStatus: LoadingStatus\n}\n\nconst initialState: State = {\n  uploadingFiles: [],\n  fullExifFilesList: {},\n  selectedList: [],\n  openMenus: ['folders'],\n  isExifLoading: false,\n  uploadingStatus: 'empty',\n}\n\nconst uploadSlice = createSlice({\n  name: 'upload',\n  initialState,\n  reducers: {\n    addUploadingFile(state, action: PayloadAction<UploadingObject>) {\n      state.uploadingFiles.push(action.payload)\n    },\n    updateUploadingFilesArr(state, action: PayloadAction<UploadingObject[]>) {\n      state.uploadingFiles = action.payload\n    },\n    addFullExifFile(state, action: PayloadAction<FullExifPayload>) {\n      const { tempPath, fullExifObj } = action.payload\n      state.fullExifFilesList[tempPath] = fullExifObj\n    },\n    updateFullExifFile(state, action: PayloadAction<ExifFilesList>) {\n      state.fullExifFilesList = { ...state.fullExifFilesList, ...action.payload }\n    },\n    addToSelectedList(state, action: PayloadAction<number>) {\n      const set = new Set(state.selectedList)\n      set.add(action.payload)\n      state.selectedList = Array.from(set)\n    },\n    removeFromSelectedList(state, action: PayloadAction<number>) {\n      const set = new Set(state.selectedList)\n      set.delete(action.payload)\n      state.selectedList = Array.from(set)\n    },\n    clearSelectedList(state) {\n      state.selectedList = []\n    },\n    selectAll(state) {\n      state.selectedList = state.uploadingFiles.map((_, i) => i)\n    },\n    updateOpenMenus(state, action: PayloadAction<string[]>) {\n      state.openMenus = action.payload\n    },\n    removeFromOpenMenus(state, action: PayloadAction<string>) {\n      const set = new Set(state.openMenus)\n      set.delete(action.payload)\n      state.openMenus = Array.from(set)\n    },\n    clearUploadingState(state) {\n      state.uploadingFiles = []\n      state.selectedList = []\n      state.fullExifFilesList = {}\n    },\n    setLoading(state, action: PayloadAction<boolean>) {\n      state.isExifLoading = action.payload\n    },\n    setUploadingStatus(state, action: PayloadAction<LoadingStatus>) {\n      state.uploadingStatus = action.payload\n    },\n  },\n})\n\nexport const {\n  addUploadingFile,\n  updateUploadingFilesArr,\n  addFullExifFile,\n  updateFullExifFile,\n  addToSelectedList,\n  removeFromSelectedList,\n  clearSelectedList,\n  selectAll,\n  updateOpenMenus,\n  removeFromOpenMenus,\n  clearUploadingState,\n  setLoading,\n  setUploadingStatus,\n} = uploadSlice.actions\n\nexport default uploadSlice.reducer\n\nexport const uploadFiles =\n  (filesArr: UploadingObject[], folderPath: string): AppThunk =>\n  dispatch => {\n    api\n      .sendPhotos(filesArr, folderPath)\n      .then(({ data }) => {\n        data === 'Файлы загружены' && dispatch(setUploadingStatus('success'))\n        data === 'Ошибка при загрузке файлов' && dispatch(setUploadingStatus('error'))\n      })\n      .catch(error => {\n        dispatch(setUploadingStatus('error'))\n        console.error('Error when getting Preview: ' + error)\n      })\n  }\n\nexport const fetchPhotosPreview =\n  (file: any): AppThunk =>\n  dispatch => {\n    const { lastModified: changeDate, name, size, type } = file\n    api\n      .sendPhoto(file)\n      .then(({ data }) => {\n        const { preview, tempPath } = data\n        const uploadingFile: UploadingObject = {\n          changeDate,\n          name,\n          size,\n          type,\n          preview,\n          tempPath,\n          originalDate: '-',\n          keywords: null,\n          megapixels: '',\n        }\n        dispatch(addUploadingFile(uploadingFile))\n      })\n      .catch(error => errorMessage(error, 'Error when getting Preview: '))\n  }\n\nexport const fetchFullExif =\n  (tempPathArr: string[]): AppThunk =>\n  async (dispatch, getState) => {\n    await api\n      .getKeywordsFromPhoto(tempPathArr)\n      .then(({ data }) => {\n        dispatch(updateFullExifFile(data))\n\n        const { uploadingFiles, fullExifFilesList } = getState().uploadReducer\n        const getUpdatingObj = curry(getUpdatedExifFieldsObj)(fullExifFilesList)\n\n        const loadExifToUploadingFiles = (acc: UploadingObject[], tempPath: string): UploadingObject[] => {\n          const loadUpdatingObjToFilesArr = curry(updateFilesArrItemByField)('tempPath')(acc)\n          return compose(loadUpdatingObjToFilesArr, getUpdatingObj)(tempPath)\n        }\n\n        const getUploadingFiles = (tempPathArr: string[]) => {\n          return reduce<string, UploadingObject[]>(loadExifToUploadingFiles, uploadingFiles, tempPathArr)\n        }\n        const uploadingFilesArr = compose(getUploadingFiles, keys)(data)\n        dispatch(updateUploadingFilesArr(uploadingFilesArr))\n      })\n      .catch(error => {\n        errorMessage(error, 'Error when getting Exif: ')\n      })\n  }\n","import { reduce } from 'ramda'\n\nimport { FolderTreeItem } from '../../redux/types'\nimport { copyByJSON, removeExtraSlash } from './utils'\n\ntype KeyType = 'parent' | 'sibling'\n\nexport const createKeyForFolderTree = (type: KeyType, key: string): string => {\n  const getKeyFromParent = () => key + '-0'\n  const getKeyFromSibling = () => {\n    const keyArr = key.split('-')\n    return `${keyArr.slice(0, -1).join('-')}-${+keyArr.slice(-1) + 1}`\n  }\n  return type === 'parent' ? getKeyFromParent() : getKeyFromSibling()\n}\nexport const addChildToTreeElem = ({ title, key }: FolderTreeItem, childTitle: string): FolderTreeItem => {\n  return { title, key, children: [{ title: childTitle, key: createKeyForFolderTree('parent', key) }] }\n}\nexport const addSiblingToTree = (title: string, tree: FolderTreeItem[]): FolderTreeItem[] => {\n  const treeItem = { title, key: createKeyForFolderTree('sibling', tree.slice(-1)[0].key) }\n  return [...copyByJSON(tree), treeItem]\n}\nexport const createChildrenIfNeeded = (foundItem: FolderTreeItem, titlesArr: string[]): FolderTreeItem => {\n  const needCreateChildren = !foundItem.children && titlesArr.length > 1 && foundItem.title === titlesArr[0]\n  return needCreateChildren ? addChildToTreeElem(foundItem, titlesArr[1]) : foundItem\n}\nexport const addSiblingIfNeeded = (tree: FolderTreeItem[], titlesArr: string[]): FolderTreeItem[] => {\n  const isFoundItem = tree.some(({ title }) => title === titlesArr[0])\n  return isFoundItem || titlesArr.length === 0 ? tree : addSiblingToTree(titlesArr[0], tree)\n}\n\nconst createBasicTree = (title: string): FolderTreeItem[] => {\n  return [{ title, key: '0-0' }]\n}\n\nexport const addFolderToFolderTree = (folderPath: string, tree: FolderTreeItem[]): FolderTreeItem[] => {\n  const getNewFolderTree = (titlesArr: string[], subTree: FolderTreeItem[]): FolderTreeItem[] => {\n    const subTreeWithNewSiblings = addSiblingIfNeeded(subTree, titlesArr)\n    return subTreeWithNewSiblings.map(item => {\n      const { title, key, children } = createChildrenIfNeeded(item, titlesArr)\n      return titlesArr.length > 1 && item.title === titlesArr[0]\n        ? { title, key, children: getNewFolderTree(titlesArr.slice(1), children || []) }\n        : item\n    })\n  }\n  const titlesArr = folderPath.split('/')\n  return getNewFolderTree(titlesArr, tree.length ? tree : createBasicTree(titlesArr[0]))\n}\n\nexport const getFolderPathFromTreeKey = (tree: FolderTreeItem[], key: string): string => {\n  const getFoundElementPath = (targetKey: string, { children, title }: FolderTreeItem): string =>\n    !children ? title : `${title}/${getFolderPathFromTreeKey(children, targetKey)}`\n\n  const foundItem = tree.find(item => key.startsWith(item.key))\n  const result = foundItem ? getFoundElementPath(key, foundItem) : ''\n  return removeExtraSlash(result)\n}\n\nexport const updateFolderTree = (folderTree: FolderTreeItem[], path: string) => {\n  const cleanFolderPath = removeExtraSlash(path)\n  return addFolderToFolderTree(cleanFolderPath, folderTree)\n}\nexport const addPathsArrToFolderTree = (paths: string[], originalFolderTree: FolderTreeItem[] = []) =>\n  reduce(updateFolderTree, originalFolderTree, paths)\n","/* eslint functional/immutable-data: 0 */\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { reduce } from 'ramda'\n\nimport { FolderTreeItem } from '../types'\nimport { AppThunk } from '../store/store'\nimport api from '../../api/api'\nimport { errorMessage } from '../../app/common/notifications'\nimport { removeExtraSlash } from '../../app/common/utils'\nimport { addFolderToFolderTree } from '../../app/common/folderTree'\n\ninterface State {\n  folderTree: FolderTreeItem[]\n  currentFolderPath: string\n  pathsArr: string[]\n  keywordsList: string[]\n}\n\nconst initialState: State = {\n  folderTree: [],\n  currentFolderPath: '',\n  pathsArr: [],\n  keywordsList: [],\n}\n\nconst folderSlice = createSlice({\n  name: 'folder',\n  initialState,\n  reducers: {\n    setFolderTree(state, action: PayloadAction<FolderTreeItem[]>) {\n      state.folderTree = action.payload\n    },\n    setCurrentFolderPath(state, action: PayloadAction<string>) {\n      state.currentFolderPath = action.payload\n    },\n    setPathsArr(state, action: PayloadAction<string[]>) {\n      state.pathsArr = action.payload\n    },\n    setKeywordsList(state, action: PayloadAction<string[]>) {\n      state.keywordsList = action.payload\n    },\n  },\n})\n\nexport const { setFolderTree, setCurrentFolderPath, setPathsArr, setKeywordsList } = folderSlice.actions\n\nexport default folderSlice.reducer\n\nexport const fetchPathsList = (): AppThunk => dispatch => {\n  const updateFolderTree = (folderTree: FolderTreeItem[], path: string) => {\n    const cleanFolderPath = removeExtraSlash(path)\n    return addFolderToFolderTree(cleanFolderPath, folderTree)\n  }\n  const createFolderTree = (paths: string[]) => reduce(updateFolderTree, [], paths)\n\n  api\n    .getPathsList()\n    .then(({ data }) => {\n      data.length && dispatch(setPathsArr(data))\n      data.length && dispatch(setFolderTree(createFolderTree(data)))\n    })\n    .catch(error => errorMessage(error, 'Error when getting Paths: '))\n}\n\nexport const fetchKeywordsList = (): AppThunk => dispatch => {\n  api\n    .getKeywordsList()\n    .then(({ data }) => data.length && dispatch(setKeywordsList(data)))\n    .catch(error => errorMessage(error, 'Error when getting Keywords List: '))\n}\n","/* eslint functional/immutable-data: 0 */\nimport { createSlice, current, PayloadAction } from '@reduxjs/toolkit'\nimport { identity, isEmpty, sortBy } from 'ramda'\n\nimport { DownloadingObject, DownloadingRawObject, GalleryPagination, UpdatedObject } from '../types'\nimport { AppThunk } from '../store/store'\nimport api from '../../api/api'\nimport { errorMessage, successMessage } from '../../app/common/notifications'\nimport { convertDownloadingRawObjectArr } from '../../app/common/utils'\nimport { setFolderTree, setPathsArr } from './foldersSlice-reducer'\nimport { addPathsArrToFolderTree } from '../../app/common/folderTree'\n\ninterface State {\n  rawFiles: DownloadingRawObject[]\n  downloadingFiles: DownloadingObject[]\n  dSelectedList: number[]\n  dOpenMenus: string[]\n  searchTags: string[]\n  excludeTags: string[]\n  galleryPagination: GalleryPagination\n  isExifLoading: boolean\n  isGalleryLoading: boolean\n}\n\nconst initialState: State = {\n  rawFiles: [],\n  downloadingFiles: [],\n  dSelectedList: [],\n  dOpenMenus: [],\n  searchTags: [],\n  excludeTags: [],\n  galleryPagination: {\n    currentPage: 1,\n    nPerPage: 60,\n    resultsCount: 0,\n    totalPages: 1,\n  },\n  isExifLoading: false,\n  isGalleryLoading: false,\n}\n\nconst uploadSlice = createSlice({\n  name: 'upload',\n  initialState,\n  reducers: {\n    setRawFiles(state, action: PayloadAction<DownloadingRawObject[]>) {\n      state.rawFiles = action.payload\n    },\n    setDownloadingFiles(state, action: PayloadAction<DownloadingObject[]>) {\n      state.downloadingFiles = action.payload\n    },\n    addToDSelectedList(state, action: PayloadAction<number>) {\n      const set = new Set(current(state).dSelectedList)\n      set.add(action.payload)\n      state.dSelectedList = Array.from(set)\n    },\n    removeFromDSelectedList(state, action: PayloadAction<number>) {\n      const set = new Set(state.dSelectedList)\n      set.delete(action.payload)\n      state.dSelectedList = Array.from(set)\n    },\n    updateDOpenMenus(state, action: PayloadAction<string[]>) {\n      state.dOpenMenus = action.payload\n    },\n    clearDSelectedList(state) {\n      state.dSelectedList = []\n    },\n    selectAllD(state) {\n      state.dSelectedList = state.downloadingFiles.map((_, i) => i)\n    },\n    setSearchTags(state, action: PayloadAction<string[]>) {\n      state.searchTags = action.payload\n    },\n    setExcludeTags(state, action: PayloadAction<string[]>) {\n      state.excludeTags = action.payload\n    },\n    setGalleryPagination(\n      state,\n      action: PayloadAction<{\n        currentPage?: number\n        nPerPage?: number\n        resultsCount?: number\n        totalPages?: number\n      }>\n    ) {\n      state.galleryPagination = {\n        ...current(state).galleryPagination,\n        ...action.payload,\n      }\n    },\n    clearDownloadingState(state) {\n      state.downloadingFiles = []\n      state.dSelectedList = []\n    },\n    setDLoading(state, action: PayloadAction<boolean>) {\n      state.isExifLoading = action.payload\n    },\n    setDGalleryLoading(state, action: PayloadAction<boolean>) {\n      state.isGalleryLoading = action.payload\n    },\n  },\n})\n\nexport const {\n  addToDSelectedList,\n  removeFromDSelectedList,\n  setRawFiles,\n  setDownloadingFiles,\n  updateDOpenMenus,\n  clearDSelectedList,\n  selectAllD,\n  setSearchTags,\n  setExcludeTags,\n  clearDownloadingState,\n  setGalleryPagination,\n  setDLoading,\n  setDGalleryLoading,\n} = uploadSlice.actions\n\nexport default uploadSlice.reducer\n\nexport const fetchPhotos =\n  (page?: number): AppThunk =>\n  (dispatch, getState) => {\n    const { mainPageReducer, folderReducer } = getState()\n    const { searchTags, excludeTags, galleryPagination } = mainPageReducer\n    const { currentPage, nPerPage } = galleryPagination\n    const curSearchTags = isEmpty(searchTags) ? undefined : searchTags\n    const curExcludeTags = isEmpty(excludeTags) ? undefined : excludeTags\n    const curFolderPath = folderReducer.currentFolderPath || undefined\n    dispatch(setDGalleryLoading(true))\n    api\n      .getPhotosByTags(page || currentPage, nPerPage, curSearchTags, curExcludeTags, curFolderPath)\n      .then(({ data }) => {\n        const rawFiles: DownloadingRawObject[] = data?.files || []\n        const files: DownloadingObject[] = convertDownloadingRawObjectArr(rawFiles)\n        dispatch(clearDSelectedList())\n        dispatch(setRawFiles(rawFiles))\n        dispatch(setDownloadingFiles(files))\n        dispatch(setGalleryPagination(data.searchPagination))\n      })\n      .catch(error => errorMessage(error, 'downloading files error: '))\n      .finally(() => dispatch(setDGalleryLoading(false)))\n  }\n\nexport const updatePhotos =\n  (updatedObjArr: UpdatedObject[]): AppThunk =>\n  (dispatch, getState) => {\n    const { folderReducer } = getState()\n    const addNewPathsArr = (newPathsArr: string[]) => {\n      const { pathsArr, folderTree } = folderReducer\n      dispatch(setPathsArr(sortBy(identity, [...pathsArr, ...newPathsArr])))\n      dispatch(setFolderTree(addPathsArrToFolderTree(newPathsArr, folderTree)))\n    }\n\n    //Todo: to recover this code, need to add an actual \"preview\" for image and video files,\n    // and possible fix some frontend bugs\n\n    // const dispatchNewFiles = (newFiles: DownloadingRawObject[]) => {\n    //   const { rawFiles, downloadingFiles } = mainPageReducer\n    //   const updateRawFiles = curry(updateFilesArrayItems)('_id', rawFiles)\n    //   const updateDownloadingFiles = curry(updateFilesArrayItems)('_id', downloadingFiles)\n    //   invokableCompose(dispatch, setRawFiles, updateRawFiles)(newFiles)\n    //   invokableCompose(dispatch, setDownloadingFiles, convertDownloadingRawObjectArr, updateDownloadingFiles)(newFiles)\n    // }\n\n    dispatch(setDGalleryLoading(true))\n    api\n      .updatePhotos(updatedObjArr)\n      .then(response => {\n        const { error, files, newFilePath } = response.data\n        error && errorMessage(new Error(error), 'updating files error: ', 0)\n        files && newFilePath && successMessage('Files updated successfully')\n        newFilePath?.length && addNewPathsArr(newFilePath)\n        // files && dispatchNewFiles(files)\n      })\n      .catch(error => {\n        console.log('error', error)\n        errorMessage(error.error, 'updating files error: ')\n      })\n      .finally(() => dispatch(setDGalleryLoading(false)))\n  }\n","import { useMemo } from 'react'\nimport { compose, curry, isEmpty, omit } from 'ramda'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useLocation } from 'react-router-dom'\n\nimport { upload } from '../../redux/selectors'\nimport { addKeywordsToAllFiles, getRenamedObjects, removeIntersectingKeywords, updateFilesArrayItems } from './utils'\nimport { fetchFullExif, setLoading, updateUploadingFilesArr } from '../../redux/reducers/uploadSlice-reducer'\nimport { DownloadingObject, UploadingObject } from '../../redux/types'\nimport { setDownloadingFiles } from '../../redux/reducers/mainPageSlice-reducer'\n\nexport const useCurrentPage = () => {\n  const { pathname } = useLocation()\n  const isUploadingPage = pathname === '/upload'\n  return {\n    isUploadingPage,\n    isMainPage: !isUploadingPage,\n    currentPageNumber: useMemo(() => (isUploadingPage ? '2' : '1'), [isUploadingPage]),\n  }\n}\n\nexport const useUpdateFields = (filesArr: Array<UploadingObject | DownloadingObject>) => {\n  const dispatch = useDispatch<any>()\n  const { fullExifFilesList } = useSelector(upload)\n\n  const isExifExist = (tempPath: string): boolean => !!fullExifFilesList[tempPath]\n\n  const updateOne = (tempPath: string): Promise<boolean> | false => {\n    return !isExifExist(tempPath) && dispatch(fetchFullExif([tempPath]))\n  }\n\n  const updateAll = (): Promise<boolean> | false => {\n    const tempPathArr = filesArr.map(({ tempPath }) => tempPath).filter(tempPath => !isExifExist(tempPath))\n    return !!tempPathArr.length && dispatch(fetchFullExif(tempPathArr))\n  }\n\n  const load = (response: Promise<boolean>): Promise<boolean> => {\n    dispatch(setLoading(true))\n    return response.then(() => dispatch(setLoading(false)))\n  }\n\n  const updateUploadingFiles = (tempPath: string, all = false): Promise<boolean> => {\n    const response = all ? updateAll() : updateOne(tempPath)\n    return response ? load(response) : Promise.resolve(true)\n  }\n\n  return {\n    updateUploadingFiles,\n  }\n}\n\nexport const useEditFilesArr = (\n  selectedList: number[],\n  filesArr: UploadingObject[],\n  sameKeywords: string[] = [],\n  isMainPage: boolean\n) => {\n  const dispatch = useDispatch()\n  const updatingAction = useMemo(() => (isMainPage ? setDownloadingFiles : updateUploadingFilesArr), [isMainPage])\n\n  return useMemo(() => {\n    const addEditedFieldsToFileArr = (\n      filesArr: UploadingObject[],\n      editedFields: Record<string, any>\n    ): UploadingObject[] => {\n      const keywords: string[] = editedFields?.keywords || []\n      const updatedFileArr = isEmpty(keywords) ? filesArr : addKeywordsToAllFiles(keywords, filesArr)\n      return updatedFileArr.map(item => ({ ...item, ...omit(['keywords'], editedFields) }))\n    }\n\n    const selectedFilesArr = filesArr.filter((_, idx) => selectedList.includes(idx))\n    const selectedFilesWithoutSameKeywords = removeIntersectingKeywords(sameKeywords, selectedFilesArr)\n    const AddEditedFieldsToFilteredFileArr = curry(addEditedFieldsToFileArr)(selectedFilesWithoutSameKeywords)\n    const mixUpdatedFilesItemsWithOriginalOnes = curry(updateFilesArrayItems)(isMainPage ? '_id' : 'tempPath', filesArr)\n\n    return compose(\n      dispatch,\n      updatingAction,\n      mixUpdatedFilesItemsWithOriginalOnes,\n      getRenamedObjects,\n      AddEditedFieldsToFilteredFileArr\n    )\n  }, [filesArr, sameKeywords, isMainPage, dispatch, updatingAction, selectedList])\n}\n","import React, { useEffect } from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { Layout, Menu, Typography } from 'antd'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { useCurrentPage } from '../../common/hooks'\nimport { fetchPathsList } from '../../../redux/reducers/foldersSlice-reducer'\nimport { pathsArr } from '../../../redux/selectors'\n\nconst { Header: HeaderLayout } = Layout\nconst { Title } = Typography\n\nconst Header = () => {\n  const dispatch = useDispatch()\n  const directoriesArr = useSelector(pathsArr)\n  const { currentPageNumber } = useCurrentPage()\n\n  useEffect(() => {\n    !directoriesArr.length && dispatch(fetchPathsList())\n  }, [dispatch, directoriesArr])\n\n  return (\n    <HeaderLayout className=\"d-flex justify-content-between align-items-center\">\n      <Title>IDBase</Title>\n      <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={[currentPageNumber]}>\n        <Menu.Item key=\"1\">\n          <NavLink to=\"/\">Main page</NavLink>\n        </Menu.Item>\n        <Menu.Item key=\"2\">\n          <NavLink to=\"/upload\">Upload</NavLink>\n        </Menu.Item>\n      </Menu>\n    </HeaderLayout>\n  )\n}\n\nexport default Header\n","import React from 'react'\nimport { Tag } from 'antd'\nimport { identity, sortBy } from 'ramda'\n\ninterface Props {\n  keywords: string[]\n  removeKeyword: (keyword: string) => void\n  isUploadingPage: boolean\n}\n\nconst KeywordsMenu = ({ keywords, removeKeyword, isUploadingPage }: Props) => {\n  const handleClose = (keyword: string) => {\n    removeKeyword(keyword)\n  }\n\n  return (\n    <div>\n      {sortBy(identity, keywords).map(item => (\n        <Tag key={item} closable={isUploadingPage} onClose={() => handleClose(item)}>\n          {item}\n        </Tag>\n      ))}\n    </div>\n  )\n}\n\nexport default KeywordsMenu\n","import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Button, Empty, Layout, Menu, Spin } from 'antd'\nimport { UserOutlined, EditFilled, CreditCardFilled, ProfileOutlined, SearchOutlined } from '@ant-design/icons'\nimport cn from 'classnames'\n\nimport styles from './index.module.scss'\nimport { EditMenu, Folders, SearchMenu } from '../index'\nimport { ExtraDownloadingFields, UploadingObject } from '../../../redux/types'\nimport KeywordsMenu from '../KeywordsMenu'\nimport { folderElement } from '../../../redux/selectors'\nimport { fetchKeywordsList } from '../../../redux/reducers/foldersSlice-reducer'\nimport { uploadFiles } from '../../../redux/reducers/uploadSlice-reducer'\nimport { useCurrentPage } from '../../common/hooks'\n\nconst { Sider } = Layout\nconst { SubMenu } = Menu\n\ninterface Props {\n  filesArr: Array<UploadingObject & ExtraDownloadingFields>\n  selectedList: number[]\n  openKeys: string[]\n  isExifLoading: boolean\n  uniqKeywords: string[]\n  sameKeywords: string[]\n  currentFolderPath: string\n  updateOpenMenus: (value: string[]) => void\n  clearSelectedList: () => void\n  selectAll: () => void\n  updateKeywords: () => Promise<any>\n  removeKeyword: (keyword: string) => void\n  removeFiles: () => void\n}\n\nconst MainMenu = ({\n  filesArr,\n  selectedList,\n  openKeys,\n  updateOpenMenus,\n  updateKeywords,\n  removeKeyword,\n  currentFolderPath,\n  clearSelectedList,\n  selectAll,\n  isExifLoading,\n  uniqKeywords,\n  sameKeywords,\n  removeFiles,\n}: Props) => {\n  const dispatch = useDispatch()\n  const { keywordsList: allKeywords } = useSelector(folderElement)\n  const [isKeywordsMenuLoading, setIsKeywordsMenuLoading] = useState(false)\n  const { isUploadingPage, isMainPage } = useCurrentPage()\n\n  useEffect(() => {\n    !allKeywords.length && dispatch(fetchKeywordsList())\n  }, [allKeywords.length, dispatch])\n\n  const loadKeywords = () => {\n    setIsKeywordsMenuLoading(true)\n    isUploadingPage && filesArr.length\n      ? updateKeywords().then(() => setIsKeywordsMenuLoading(false))\n      : setIsKeywordsMenuLoading(false)\n  }\n\n  const handleTitleClick = ({ key }: { key: string }) => {\n    clearSelectedList()\n    const openKeysSet = new Set(openKeys)\n    key === 'edit' && openKeysSet.delete('template')\n    key === 'template' && openKeysSet.delete('edit')\n    key === 'keywords' && !isKeywordsMenuLoading && loadKeywords()\n    openKeysSet.has(key) ? openKeysSet.delete(key) : openKeysSet.add(key)\n    updateOpenMenus(Array.from(openKeysSet))\n  }\n\n  const handleUploadClick = () => {\n    dispatch(uploadFiles(filesArr, currentFolderPath))\n    removeFiles()\n    updateOpenMenus(['folders'])\n  }\n\n  const KeywordsMenuWrapper = () => (\n    <div className={cn(styles.keywordsMenuWrapper, 'd-flex justify-content-center')}>\n      {isKeywordsMenuLoading ? (\n        <Spin tip=\"Loading...\" />\n      ) : (\n        <KeywordsMenu keywords={uniqKeywords} removeKeyword={removeKeyword} isUploadingPage={isUploadingPage} />\n      )}\n      {!isKeywordsMenuLoading && !uniqKeywords.length ? <Empty /> : ''}\n    </div>\n  )\n\n  return (\n    <Sider theme=\"light\" className={styles.sider} width=\"400\">\n      <Menu mode=\"inline\" className={styles.menu} defaultOpenKeys={openKeys} openKeys={openKeys}>\n        <SubMenu key=\"search\" icon={<SearchOutlined />} title=\"Search\" onTitleClick={handleTitleClick}>\n          <SearchMenu />\n        </SubMenu>\n        <SubMenu key=\"folders\" icon={<UserOutlined />} title=\"Folders\" onTitleClick={handleTitleClick}>\n          <Folders isMainPage={isMainPage} />\n        </SubMenu>\n        <SubMenu key=\"edit\" icon={<EditFilled />} title=\"Edit\" onTitleClick={handleTitleClick}>\n          <EditMenu\n            {...{\n              filesArr,\n              selectedList,\n              sameKeywords,\n              isExifLoading,\n              allKeywords,\n              isMainPage,\n            }}\n          />\n        </SubMenu>\n        <SubMenu key=\"template\" icon={<CreditCardFilled />} title=\"Template\" onTitleClick={handleTitleClick}>\n          <EditMenu\n            {...{\n              filesArr,\n              selectedList,\n              sameKeywords,\n              selectAll,\n              isExifLoading,\n              allKeywords,\n              clearAll: clearSelectedList,\n              isEditMany: true,\n              isMainPage,\n            }}\n          />\n        </SubMenu>\n        <SubMenu key=\"keywords\" icon={<ProfileOutlined />} title=\"Keywords\" onTitleClick={handleTitleClick}>\n          <KeywordsMenuWrapper />\n        </SubMenu>\n        {isUploadingPage ? (\n          <Menu.Item key=\"buttons-menu\">\n            <div className=\"d-flex justify-content-around\">\n              <Button disabled={!filesArr.length} type=\"primary\" onClick={removeFiles}>\n                Remove files\n              </Button>\n              <Button disabled={!currentFolderPath || !filesArr.length} type=\"primary\" onClick={handleUploadClick}>\n                Upload files\n              </Button>\n            </div>\n          </Menu.Item>\n        ) : (\n          ''\n        )}\n      </Menu>\n    </Sider>\n  )\n}\n\nexport default MainMenu\n","import React, { Key } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Tree } from 'antd'\nimport { compose, curry } from 'ramda'\n\nimport { setCurrentFolderPath } from '../../../redux/reducers/foldersSlice-reducer'\nimport { getFolderPathFromTreeKey } from '../../common/folderTree'\nimport { folderElement } from '../../../redux/selectors'\nimport { fetchPhotos } from '../../../redux/reducers/mainPageSlice-reducer'\n\nconst { DirectoryTree } = Tree\n\ninterface Props {\n  isMainPage: boolean\n}\n\nconst FolderTree = ({ isMainPage }: Props) => {\n  const { folderTree } = useSelector(folderElement)\n  const dispatch = useDispatch()\n\n  const onSelect = (keys: Key[]) => {\n    const getFolderPathFromTree = curry(getFolderPathFromTreeKey)(folderTree)\n    compose(dispatch, setCurrentFolderPath, getFolderPathFromTree)(keys[0].toString())\n    isMainPage && dispatch(fetchPhotos())\n  }\n\n  return <DirectoryTree onSelect={onSelect} treeData={folderTree} />\n}\n\nexport default FolderTree\n","import React, { useMemo } from 'react'\n\nimport { AutoComplete, Button, Tooltip } from 'antd'\nimport { PlusOutlined } from '@ant-design/icons'\n\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { FolderTree } from '../index'\nimport styles from './index.module.scss'\n\nimport { folderElement, pathsArr, pathsArrOptionsSelector } from '../../../redux/selectors'\nimport { setCurrentFolderPath, setFolderTree, setPathsArr } from '../../../redux/reducers/foldersSlice-reducer'\nimport { addFolderToFolderTree } from '../../common/folderTree'\nimport { removeExtraSlash } from '../../common/utils'\n\ninterface Props {\n  isMainPage: boolean\n}\n\nconst Folders = ({ isMainPage }: Props) => {\n  const dispatch = useDispatch()\n  const { folderTree, currentFolderPath } = useSelector(folderElement)\n  const directoriesArr = useSelector(pathsArr)\n  const options = useSelector(pathsArrOptionsSelector)\n\n  const cleanFolderPath = useMemo(() => removeExtraSlash(currentFolderPath), [currentFolderPath])\n  const isButtonAddDisabled = useMemo(() => directoriesArr.includes(cleanFolderPath), [cleanFolderPath, directoriesArr])\n\n  const onChange = (data: string) => {\n    dispatch(setCurrentFolderPath(data))\n  }\n\n  const setNewFolder = (): void => {\n    dispatch(setPathsArr([...directoriesArr, cleanFolderPath]))\n    dispatch(setFolderTree(addFolderToFolderTree(cleanFolderPath, folderTree)))\n  }\n\n  const handleAddClick = () => {\n    currentFolderPath !== '' && setNewFolder()\n  }\n\n  return (\n    <div className={styles.folderWrapper}>\n      <FolderTree isMainPage={isMainPage} />\n      <div className=\"d-flex align-items-center\">\n        <span className={styles.label}>Directory:</span>\n        <AutoComplete\n          className=\"flex-1\"\n          options={options}\n          defaultValue={currentFolderPath}\n          value={currentFolderPath}\n          onChange={onChange}\n          filterOption={(inputValue, option) => option?.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1}\n        />\n        <Tooltip title=\"add Directory\" className={styles.plusIcon}>\n          <Button\n            onClick={handleAddClick}\n            disabled={isButtonAddDisabled}\n            type=\"primary\"\n            shape=\"circle\"\n            icon={<PlusOutlined />}\n          />\n        </Tooltip>\n      </div>\n    </div>\n  )\n}\n\nexport default Folders\n","import React, { useMemo } from 'react'\n\nimport { Upload, message, UploadProps } from 'antd'\nimport { InboxOutlined } from '@ant-design/icons'\nimport { UploadChangeParam } from 'antd/lib/upload/interface'\nimport { useDispatch, useSelector } from 'react-redux'\nimport cn from 'classnames'\n\nimport styles from './index.module.scss'\nimport { folderElement } from '../../../redux/selectors'\nimport { fetchPhotosPreview, setUploadingStatus } from '../../../redux/reducers/uploadSlice-reducer'\n\nconst { Dragger } = Upload\n\ninterface Props {\n  openMenus: string[]\n}\n\nconst DropZone = ({ openMenus }: Props) => {\n  const { currentFolderPath } = useSelector(folderElement)\n  const dispatch = useDispatch()\n  const isEditOne = useMemo(() => openMenus.includes('edit'), [openMenus])\n  const isEditMany = useMemo(() => openMenus.includes('template'), [openMenus])\n\n  const props: UploadProps = {\n    accept: 'image/*, video/*',\n    className: cn(styles.dropZone, { active: isEditOne || isEditMany }),\n    name: 'file',\n    multiple: true,\n    showUploadList: false,\n    headers: {\n      path: currentFolderPath,\n      'Content-Type': 'application/json',\n    },\n    customRequest(info) {\n      dispatch(fetchPhotosPreview(info.file))\n      dispatch(setUploadingStatus('empty'))\n    },\n    onChange(info: UploadChangeParam) {\n      const { status } = info.file\n      status !== 'uploading' && console.log(info.file, info.fileList)\n      status === 'done' && message.success(`${info.file.name} file uploaded successfully.`)\n      status === 'error' && message.error(`${info.file.name} file upload failed.`)\n    },\n  }\n\n  return (\n    <Dragger {...props}>\n      <p className=\"ant-upload-drag-icon\">\n        <InboxOutlined />\n      </p>\n      <p className=\"ant-upload-text\">Click or drag file to this area to upload</p>\n      <p className=\"ant-upload-hint\">Support for a single or bulk upload.</p>\n    </Dragger>\n  )\n}\n\nexport default DropZone\n","import React, { MouseEvent, useCallback, useEffect, useMemo, useState } from 'react'\nimport cn from 'classnames'\nimport { compose, keys, map } from 'ramda'\nimport { Modal, Spin } from 'antd'\nimport Iframe from 'react-iframe'\nimport ImageGallery from 'react-image-gallery'\n\nimport styles from './index.module.scss'\nimport { ExifFilesList, ExtraDownloadingFields, IGallery, UploadingObject } from '../../../redux/types'\n\nexport interface GalleryProps {\n  openMenus: string[]\n  imageArr: Array<UploadingObject & ExtraDownloadingFields>\n  fullExifFilesList: ExifFilesList\n  selectedList: number[]\n  removeFromSelectedList: (index: number) => void\n  addToSelectedList: (index: number) => void\n  clearSelectedList: () => void\n  updateFiles: (tempPath: string) => void\n  isLoading?: boolean\n  isMainPage?: boolean\n}\n\nconst Gallery = ({\n  openMenus,\n  imageArr,\n  fullExifFilesList,\n  selectedList,\n  addToSelectedList,\n  removeFromSelectedList,\n  clearSelectedList,\n  updateFiles,\n  isLoading,\n  isMainPage,\n}: GalleryProps) => {\n  const [currentTempPath, setCurrentTempPath] = useState('')\n  const [showModal, setShowModal] = useState(false)\n  const [showImageModal, setShowImageModal] = useState(false)\n  const [showVideo, setShowVideo] = useState(false)\n  const [showPlayButton, setShowPlayButton] = useState(true)\n  const [showFullscreenButton, setShowFullscreenButton] = useState(true)\n  const [currentImage, setCurrentImage] = useState<number>(0)\n  const [galleryArr, setGalleryArr] = useState<IGallery[]>([])\n  const isEditMenu = useMemo(() => openMenus.includes('edit'), [openMenus])\n  const isTemplateMenu = useMemo(() => openMenus.includes('template'), [openMenus])\n  const exif = useMemo(() => fullExifFilesList[currentTempPath], [fullExifFilesList, currentTempPath])\n\n  const handlePlay = () => {\n    setShowVideo(true)\n    setShowPlayButton(false)\n    setShowFullscreenButton(false)\n  }\n\n  const videoItem = useCallback(\n    (originalPath: string, preview: string) => {\n      return (\n        <>\n          {showVideo ? (\n            <Iframe url={originalPath} width=\"80vm\" id=\"myId\" className={styles.iframeStyles} position=\"relative\" />\n          ) : (\n            <div>\n              <div className={styles.playButton} onClick={handlePlay} />\n              <img src={preview} alt=\"video-preview\" />\n            </div>\n          )}\n        </>\n      )\n    },\n    [showVideo]\n  )\n\n  useEffect(() => {\n    isMainPage &&\n      setGalleryArr(\n        imageArr.map(item => {\n          const galleryItem: IGallery = {\n            thumbnail: item.preview,\n            original: item.originalPath || '',\n            ...(item.type.startsWith('video') && {\n              renderItem: () => videoItem(item.originalPath || '', item.preview),\n            }),\n          }\n          return galleryItem\n        })\n      )\n  }, [imageArr, isMainPage, showVideo, videoItem])\n\n  const getExif = (e: MouseEvent, tempPath: string) => {\n    e.stopPropagation()\n    !fullExifFilesList[tempPath] && updateFiles(tempPath)\n    setCurrentTempPath(tempPath)\n    setShowModal(true)\n  }\n\n  const handleImageClick = (i: number, tempPath: string) => {\n    const updateFilesArr = () => {\n      addToSelectedList(i)\n      updateFiles(tempPath)\n    }\n    const selectOnlyOne = () => {\n      clearSelectedList()\n      updateFilesArr()\n    }\n    const selectAnyQuantity = () => {\n      selectedList.includes(i) ? removeFromSelectedList(i) : updateFilesArr()\n    }\n    const showImageModal = () => {\n      setShowImageModal(true)\n      setCurrentImage(i)\n    }\n\n    isEditMenu && selectOnlyOne()\n    isTemplateMenu && selectAnyQuantity()\n    !isEditMenu && !isTemplateMenu && showImageModal()\n  }\n\n  const handleSlide = (currentIndex: number) => {\n    setCurrentImage(currentIndex)\n    setShowPlayButton(true)\n    setShowFullscreenButton(true)\n    setShowVideo(false)\n  }\n\n  return (\n    <Spin className={styles.spinner} spinning={isLoading} size=\"large\">\n      <div className={cn(styles.wrapper, 'd-grid')}>\n        {imageArr.map(({ preview, name, tempPath }, i) => (\n          <div\n            key={preview}\n            className={cn(\n              styles.item,\n              {\n                active: selectedList.includes(i),\n                pointer: isEditMenu || isTemplateMenu,\n              },\n              'position-relative'\n            )}\n            onClick={() => handleImageClick(i, tempPath)}\n          >\n            <div\n              className={cn(\n                styles.imgInfo,\n                `${isEditMenu || isTemplateMenu ? 'd-none' : 'd-flex'} `,\n                'position-absolute align-items-center'\n              )}\n            >\n              <h3 style={{ width: '70%' }} className={styles.imgName}>\n                {name}\n              </h3>\n              <h3\n                style={{ marginLeft: 'auto' }}\n                className={cn(styles.imgName, 'pointer')}\n                onClick={e => getExif(e, tempPath)}\n              >\n                Exif\n              </h3>\n            </div>\n            <img className={styles.img} src={preview} alt=\"image-preview\" />\n          </div>\n        ))}\n        <Modal title=\"Exif list\" footer={null} visible={showModal} onCancel={() => setShowModal(false)}>\n          {compose(\n            map((item: string) => (\n              <div key={item}>\n                <span className=\"bold\">{item + ':'}</span>\n                <span style={{ marginLeft: 5 }}>{exif[item]}</span>\n              </div>\n            )),\n            keys\n          )(exif)}\n        </Modal>\n        {isMainPage ? (\n          <Modal\n            visible={showImageModal}\n            wrapClassName=\"image-modal\"\n            closable={false}\n            centered\n            width=\"90%\"\n            footer={null}\n            onCancel={() => setShowImageModal(false)}\n          >\n            <ImageGallery\n              items={galleryArr}\n              slideDuration={0}\n              slideInterval={3000}\n              startIndex={currentImage}\n              showThumbnails={false}\n              onSlide={handleSlide}\n              showPlayButton={showPlayButton}\n              showFullscreenButton={showFullscreenButton}\n              showIndex\n            />\n          </Modal>\n        ) : (\n          ''\n        )}\n      </div>\n    </Spin>\n  )\n}\n\nexport default Gallery\n","import React, { useEffect, useMemo, useState } from 'react'\nimport { AutoComplete, Button, Checkbox, Col, DatePicker, Form, Input, Modal, Row, Select } from 'antd'\nimport { useDispatch, useSelector } from 'react-redux'\nimport moment from 'moment'\nimport { compose, curry, identity, isEmpty, sortBy } from 'ramda'\nimport cn from 'classnames'\n\nimport styles from './index.module.scss'\nimport { ExtraDownloadingFields, UpdatedObject, UploadingObject } from '../../../redux/types'\nimport {\n  dateFormat,\n  getFilePathWithoutName,\n  getFilesWithUpdatedKeywords,\n  getLastItem,\n  getNameParts,\n  getRenamedObjects,\n  removeEmptyFields,\n  removeExtraFirstSlash,\n  removeExtraSlash,\n  removeIntersectingKeywords,\n} from '../../common/utils'\nimport { useEditFilesArr } from '../../common/hooks'\nimport { updatePhotos } from '../../../redux/reducers/mainPageSlice-reducer'\nimport { pathsArrOptionsSelector } from '../../../redux/selectors'\n\nconst { Option } = Select\n\ninterface Props {\n  filesArr: Array<UploadingObject & ExtraDownloadingFields>\n  selectedList: number[]\n  isExifLoading: boolean\n  sameKeywords: string[]\n  allKeywords: string[]\n  isEditMany?: boolean\n  selectAll?: () => void\n  clearAll?: () => void\n  isMainPage: boolean\n}\n\ntype CheckboxType = 'isName' | 'isOriginalDate' | 'isKeywords' | 'isFilePath'\ntype Checkboxes = Record<CheckboxType, boolean>\n\ninterface InitialFileObject extends Checkboxes {\n  name: string\n  originalDate: string\n  filePath: string\n  keywords: string[]\n}\n\nconst initialFileObject: InitialFileObject = {\n  name: '-',\n  originalDate: '',\n  filePath: '',\n  keywords: [],\n  isName: false,\n  isOriginalDate: false,\n  isFilePath: false,\n  isKeywords: false,\n}\n\nconst duplicateConfig = {\n  title: 'Duplicate names',\n  content: 'Please enter another name',\n}\n\nconst emptyCheckboxesConfig = {\n  title: 'Nothing to edit',\n  content: 'Please check one of the checkboxes',\n}\n\nconst getNewFilePath = (isName: boolean, newName: string, originalName: string, filePath: string) => {\n  const preparedFilePath = compose(removeExtraSlash, removeExtraFirstSlash)(filePath)\n  return `${preparedFilePath}/${isName ? newName : originalName}`\n}\n\nconst EditMenu = ({\n  filesArr,\n  selectedList,\n  sameKeywords,\n  isEditMany,\n  selectAll,\n  clearAll,\n  isExifLoading,\n  allKeywords,\n  isMainPage,\n}: Props) => {\n  const [form] = Form.useForm()\n  const [modal, contextHolder] = Modal.useModal()\n  const dispatch = useDispatch()\n  const pathsListOptions = useSelector(pathsArrOptionsSelector)\n  const [currentFilePath, setCurrentFilePath] = useState('')\n  const [isSelectAllBtn, setIsSelectAllBtn] = useState(true)\n  const editUploadingFiles = useEditFilesArr(selectedList, filesArr, sameKeywords, isMainPage)\n  const { name, originalDate } = useMemo<UploadingObject | InitialFileObject>(\n    () => (!selectedList.length ? initialFileObject : filesArr[getLastItem(selectedList)]),\n    [filesArr, selectedList]\n  )\n  const disabledInputs = useMemo(() => !selectedList.length, [selectedList])\n  const { shortName, ext } = useMemo(() => getNameParts(name), [name])\n\n  useEffect(() => {\n    const getFilePath = () => {\n      const filePath = filesArr[getLastItem(selectedList)].filePath || ''\n      return compose(getFilePathWithoutName, removeExtraFirstSlash)(filePath)\n    }\n    isMainPage && selectedList.length && setCurrentFilePath(getFilePath())\n  }, [filesArr, isMainPage, selectedList])\n\n  useEffect(() => {\n    !selectedList.length && setIsSelectAllBtn(true)\n    selectedList.length === filesArr.length && setIsSelectAllBtn(false)\n  }, [selectedList.length, filesArr.length])\n\n  useEffect(() => {\n    form.setFieldsValue({\n      name: shortName,\n      originalDate: originalDate === '-' ? '' : moment(originalDate, dateFormat),\n      keywords: sortBy(identity, sameKeywords || []),\n      filePath: currentFilePath,\n      isName: false,\n      isOriginalDate: false,\n      isKeywords: false,\n      isFilePath: false,\n    })\n  }, [form, shortName, originalDate, sameKeywords, currentFilePath])\n\n  const fetchUpdatedFiles = (\n    currentName: string,\n    currentOriginalDate: string | null,\n    currentFilePath: string,\n    keywords: string[],\n    checkboxes: Checkboxes\n  ) => {\n    const selectedFiles = filesArr\n      .filter((_, idx) => selectedList.includes(idx))\n      .map(({ _id, keywords }) => ({\n        _id,\n        keywords,\n        name: currentName,\n      }))\n    const newNamesArr: string[] = getRenamedObjects(selectedFiles).map(({ name }) => name)\n    const selectedFilesWithoutSameKeywords = removeIntersectingKeywords(sameKeywords, selectedFiles)\n    const newKeywordsArr: string[][] = getFilesWithUpdatedKeywords(selectedFilesWithoutSameKeywords, keywords).map(\n      ({ keywords }) => keywords || []\n    )\n\n    const getUpdatedFields = (idx: number) => {\n      const { isName, isOriginalDate, isKeywords, isFilePath } = checkboxes\n      return {\n        originalName: isName && !newNamesArr[idx].startsWith('-') ? newNamesArr[idx] : undefined,\n        originalDate: (isOriginalDate && currentOriginalDate) || undefined,\n        keywords: isKeywords ? newKeywordsArr[idx] : undefined,\n        filePath: isFilePath ? currentFilePath : undefined,\n      }\n    }\n    const updatedFiles: UpdatedObject[] = selectedFiles.map(({ _id }, i) => ({\n      id: _id || '',\n      updatedFields: getUpdatedFields(i),\n    }))\n\n    updatedFiles.length && dispatch(updatePhotos(updatedFiles))\n  }\n\n  const onFinish = ({\n    name: newName,\n    originalDate: newOriginalDate,\n    keywords,\n    isName,\n    filePath,\n    isOriginalDate,\n    isKeywords,\n    isFilePath,\n  }: any) => {\n    const currentName = newName ? newName + ext : ''\n    const currentOriginalDate = newOriginalDate ? moment(newOriginalDate).format(dateFormat) : null\n    const isDuplicateName = curry((filesArr: UploadingObject[], currentName: string) => {\n      const fileArrNames = filesArr.map(({ name }) => name)\n      return fileArrNames.includes(currentName)\n    })(filesArr)\n\n    const updateValues = () => {\n      const getFilePath = curry(getNewFilePath)(isName, currentName, name)\n      const preparedValue = {\n        name: isName && newName ? currentName : undefined,\n        originalDate: isOriginalDate ? currentOriginalDate : undefined,\n        keywords: isKeywords ? keywords : sortBy(identity, sameKeywords || []),\n        filePath: isFilePath && filePath ? getFilePath(filePath) : undefined,\n      }\n\n      const checkboxes: Checkboxes = { isName, isOriginalDate, isKeywords, isFilePath }\n\n      isMainPage && fetchUpdatedFiles(currentName, currentOriginalDate, `/${filePath}`, keywords, checkboxes)\n      const editedFields = removeEmptyFields(preparedValue)\n      !isEmpty(editedFields) && editUploadingFiles(editedFields)\n    }\n\n    const needModalIsDuplicate = !isEditMany && isName && isDuplicateName(currentName)\n    const isEmptyCheckboxes = !isName && !isOriginalDate && !isKeywords && !isFilePath\n\n    needModalIsDuplicate && modal.warning(duplicateConfig)\n    isEmptyCheckboxes && modal.warning(emptyCheckboxesConfig)\n    !needModalIsDuplicate && !isEmptyCheckboxes && updateValues()\n  }\n\n  const handleSelectAll = () => {\n    isSelectAllBtn && selectAll && selectAll()\n    !isSelectAllBtn && clearAll && clearAll()\n    setIsSelectAllBtn(!isSelectAllBtn)\n  }\n\n  return (\n    <div>\n      <Form form={form} name=\"editForm\" onFinish={onFinish}>\n        <Row className={styles.item} gutter={10}>\n          <Col span={8} offset={1} style={{ textAlign: 'left' }}>\n            <Form.Item name=\"isName\" valuePropName=\"checked\">\n              <Checkbox>Name:</Checkbox>\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item name=\"name\">\n              <Input placeholder=\"Edit name\" disabled={disabledInputs} allowClear />\n            </Form.Item>\n          </Col>\n          <Col span={3}>\n            <span className={cn(styles.extension, 'd-block')}>{ext}</span>\n          </Col>\n        </Row>\n\n        <Row gutter={10}>\n          <Col span={8} offset={1} style={{ textAlign: 'left' }}>\n            <Form.Item name=\"isOriginalDate\" valuePropName=\"checked\">\n              <Checkbox>OriginalDate:</Checkbox>\n            </Form.Item>\n          </Col>\n          <Col span={14}>\n            <Form.Item name=\"originalDate\">\n              <DatePicker format={dateFormat} placeholder=\"Edit date\" disabled={disabledInputs} className=\"w-100\" />\n            </Form.Item>\n          </Col>\n        </Row>\n\n        {isMainPage ? (\n          <Row gutter={10}>\n            <Col span={8} offset={1} style={{ textAlign: 'left' }}>\n              <Form.Item name=\"isFilePath\" valuePropName=\"checked\">\n                <Checkbox>File path:</Checkbox>\n              </Form.Item>\n            </Col>\n            <Col span={14}>\n              <Form.Item name=\"filePath\">\n                <AutoComplete\n                  disabled={disabledInputs}\n                  placeholder=\"Edit file path\"\n                  options={pathsListOptions}\n                  onChange={(value: string) => setCurrentFilePath(value)}\n                  filterOption={(inputValue, option) =>\n                    option?.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1\n                  }\n                />\n              </Form.Item>\n            </Col>\n          </Row>\n        ) : (\n          ''\n        )}\n\n        <Row gutter={10}>\n          <Col span={8} offset={1} style={{ textAlign: 'left' }}>\n            <Form.Item name=\"isKeywords\" valuePropName=\"checked\">\n              <Checkbox>Keywords:</Checkbox>\n            </Form.Item>\n          </Col>\n          <Col span={14}>\n            <Form.Item name=\"keywords\">\n              <Select className={styles.keywords} mode=\"tags\" placeholder=\"Edit keywords\" disabled={disabledInputs}>\n                {allKeywords &&\n                  allKeywords.map(keyword => (\n                    <Option key={keyword} value={keyword}>\n                      {keyword}\n                    </Option>\n                  ))}\n              </Select>\n            </Form.Item>\n          </Col>\n        </Row>\n\n        <Row gutter={10}>\n          <Col span={7} offset={9}>\n            <Form.Item>\n              <Button\n                className=\"w-100\"\n                style={{ marginRight: 10 }}\n                type=\"primary\"\n                htmlType=\"submit\"\n                disabled={disabledInputs}\n              >\n                Edit\n              </Button>\n            </Form.Item>\n          </Col>\n          <Col span={7}>\n            <Form.Item>\n              {isEditMany ? (\n                <Button className=\"w-100\" onClick={handleSelectAll} type=\"primary\" loading={isExifLoading}>\n                  {isSelectAllBtn ? 'Select all' : 'Unselect all'}\n                </Button>\n              ) : (\n                ''\n              )}\n            </Form.Item>\n          </Col>\n        </Row>\n      </Form>\n      {contextHolder}\n    </div>\n  )\n}\n\nexport default EditMenu\n","import React from 'react'\nimport { Alert } from 'antd'\nimport { InfoCircleFilled } from '@ant-design/icons'\nimport cn from 'classnames'\n\nimport styles from './index.module.scss'\n\ninterface Props {\n  message: string\n  hide: boolean\n  type: 'success' | 'info' | 'warning' | 'error'\n}\n\nconst CustomAlert = ({ message, hide, type }: Props) => {\n  return (\n    <Alert\n      className={cn(styles.alert, { hide }, 'justify-content-center')}\n      message={message}\n      type={type}\n      icon={<InfoCircleFilled />}\n      showIcon\n    />\n  )\n}\n\nexport default CustomAlert\n","import React, { useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Select } from 'antd'\nimport { difference } from 'ramda'\nimport cn from 'classnames'\n\nimport { folderElement, main } from '../../../redux/selectors'\nimport styles from './index.module.scss'\nimport { fetchPhotos, setExcludeTags, setSearchTags } from '../../../redux/reducers/mainPageSlice-reducer'\n\nconst { Option } = Select\n\nconst SearchMenu = () => {\n  const dispatch = useDispatch<any>()\n  const { keywordsList } = useSelector(folderElement)\n  const { searchTags, excludeTags } = useSelector(main)\n  const searchKeywordsList = useMemo(() => difference(keywordsList, excludeTags), [excludeTags, keywordsList])\n  const excludeKeywordsList = useMemo(() => difference(keywordsList, searchTags), [searchTags, keywordsList])\n\n  const handleSearchChange = (value: string[]) => {\n    dispatch(setSearchTags(value))\n    dispatch(fetchPhotos())\n  }\n\n  const handleExcludeChange = (value: string[]) => {\n    dispatch(setExcludeTags(value))\n    dispatch(fetchPhotos())\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      <span className={styles.title}>Search tags:</span>\n      <Select\n        className={cn(styles.select, 'w-100')}\n        mode=\"tags\"\n        placeholder=\"choose Keywords\"\n        onChange={handleSearchChange}\n      >\n        {searchKeywordsList.map(keyword => (\n          <Option key={keyword} value={keyword}>\n            {keyword}\n          </Option>\n        ))}\n      </Select>\n      <span className={styles.title}>Exclude tags:</span>\n      <Select className=\"w-100\" mode=\"tags\" placeholder=\"choose Keywords\" onChange={handleExcludeChange}>\n        {excludeKeywordsList.map(keyword => (\n          <Option key={keyword} value={keyword}>\n            {keyword}\n          </Option>\n        ))}\n      </Select>\n    </div>\n  )\n}\n\nexport default SearchMenu\n","import React, { useMemo } from 'react'\nimport { Layout, Result } from 'antd'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { CustomAlert, DropZone, Gallery, MainMenu } from '../../Components'\nimport {\n  allSameKeywordsSelector,\n  allUploadKeywordsSelector,\n  folderElement,\n  upload,\n  uploadPageGalleryPropsSelector,\n} from '../../../redux/selectors'\nimport {\n  addToSelectedList,\n  clearSelectedList,\n  removeFromSelectedList,\n  updateOpenMenus,\n  selectAll,\n  updateUploadingFilesArr,\n  clearUploadingState,\n} from '../../../redux/reducers/uploadSlice-reducer'\nimport { useUpdateFields } from '../../common/hooks'\nimport { GalleryProps } from '../../Components/Gallery'\nimport { isValidResultStatus, removeIntersectingKeywords } from '../../common/utils'\nimport { LoadingStatus } from '../../../redux/types'\n\nconst { Content } = Layout\n\nconst statusMessage: Record<LoadingStatus, string> = {\n  success: 'Files uploaded successfully',\n  error: 'Submission Failed',\n  loading: '',\n  empty: '',\n}\n\nconst UploadPage = () => {\n  const dispatch = useDispatch()\n  const { isExifLoading, uploadingStatus } = useSelector(upload)\n  const uniqKeywords = useSelector(allUploadKeywordsSelector)\n  const sameKeywords = useSelector(allSameKeywordsSelector)\n  const mainGalleryProps = useSelector(uploadPageGalleryPropsSelector)\n  const { openMenus, selectedList, imageArr } = mainGalleryProps\n  const { currentFolderPath } = useSelector(folderElement)\n  const { updateUploadingFiles } = useUpdateFields(imageArr)\n\n  const galleryProps: GalleryProps = {\n    ...mainGalleryProps,\n    removeFromSelectedList: (index: number) => dispatch(removeFromSelectedList(index)),\n    addToSelectedList: (index: number) => dispatch(addToSelectedList(index)),\n    clearSelectedList: () => dispatch(clearSelectedList()),\n    updateFiles: (tempPath: string) => updateUploadingFiles(tempPath),\n    isLoading: false,\n  }\n\n  const mainMenuProps = {\n    filesArr: imageArr,\n    selectedList,\n    isExifLoading,\n    uniqKeywords,\n    sameKeywords,\n    openKeys: openMenus,\n    currentFolderPath,\n    clearSelectedList: () => dispatch(clearSelectedList()),\n    selectAll: () => {\n      dispatch(selectAll())\n      updateUploadingFiles('_', true)\n    },\n    updateOpenMenus: (value: string[]) => dispatch(updateOpenMenus(value)),\n    updateKeywords: (): Promise<any> => updateUploadingFiles('_', true),\n    removeKeyword: (keyword: string) => {\n      const filesArrWithoutKeyword = removeIntersectingKeywords([keyword], imageArr)\n      dispatch(updateUploadingFilesArr(filesArrWithoutKeyword))\n    },\n    removeFiles: () => dispatch(clearUploadingState()),\n  }\n\n  const ResultComponent = useMemo(() => {\n    const validStatus = isValidResultStatus(uploadingStatus)\n    return validStatus ? <Result status={validStatus || 'info'} title={statusMessage[uploadingStatus]} /> : ''\n  }, [uploadingStatus])\n\n  return (\n    <Layout>\n      <MainMenu {...mainMenuProps} />\n      <Layout>\n        <Content>\n          <DropZone openMenus={openMenus} />\n          {ResultComponent}\n          <CustomAlert message=\"Edit mode\" hide={!openMenus.includes('edit')} type=\"info\" />\n          <CustomAlert message=\"Template mode\" hide={!openMenus.includes('template')} type=\"success\" />\n          <Gallery {...galleryProps} />\n        </Content>\n      </Layout>\n    </Layout>\n  )\n}\n\nexport default UploadPage\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Pagination } from 'antd'\n\nimport { pagination } from '../../../redux/selectors'\nimport { fetchPhotos, setGalleryPagination } from '../../../redux/reducers/mainPageSlice-reducer'\n\nconst option = ['30', '60', '100', '200']\n\nconst PaginationMenu = () => {\n  const dispatch = useDispatch()\n  const { currentPage, resultsCount, nPerPage } = useSelector(pagination)\n\n  const handleChange = (page: number, pageSize?: number) => {\n    const paginationObj = { currentPage: pageSize === nPerPage ? page : 1, ...(pageSize && { nPerPage: pageSize }) }\n    dispatch(setGalleryPagination(paginationObj))\n    dispatch(fetchPhotos())\n  }\n\n  return (\n    <Pagination\n      style={{ margin: '10px 0 0 20px' }}\n      total={resultsCount}\n      showTotal={total => `Total ${total} items`}\n      pageSize={nPerPage}\n      current={currentPage}\n      showSizeChanger\n      pageSizeOptions={option}\n      onChange={handleChange}\n    />\n  )\n}\n\nexport default PaginationMenu\n","import React, { useEffect, useState } from 'react'\nimport { Layout } from 'antd'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { isEmpty } from 'ramda'\n\nimport { CustomAlert, Gallery, MainMenu } from '../../Components'\nimport {\n  allDownloadingKeywordsSelector,\n  dAllSameKeywordsSelector,\n  dPageGalleryPropsSelector,\n  folderElement,\n  main,\n} from '../../../redux/selectors'\nimport { useUpdateFields } from '../../common/hooks'\nimport { GalleryProps } from '../../Components/Gallery'\nimport { removeIntersectingKeywords } from '../../common/utils'\nimport {\n  addToDSelectedList,\n  clearDownloadingState,\n  clearDSelectedList,\n  fetchPhotos,\n  removeFromDSelectedList,\n  selectAllD,\n  setDownloadingFiles,\n  updateDOpenMenus,\n} from '../../../redux/reducers/mainPageSlice-reducer'\nimport PaginationMenu from '../../Components/PaginationMenu'\n\nconst { Content } = Layout\n\nconst MainPage = () => {\n  const dispatch = useDispatch()\n  const [isFilesLoaded, setIsFilesLoaded] = useState(false)\n  const { isExifLoading, isGalleryLoading } = useSelector(main)\n  const uniqKeywords = useSelector(allDownloadingKeywordsSelector)\n  const sameKeywords = useSelector(dAllSameKeywordsSelector)\n  const mainGalleryProps = useSelector(dPageGalleryPropsSelector)\n  const { openMenus, selectedList, imageArr } = mainGalleryProps\n  const { currentFolderPath } = useSelector(folderElement)\n  const { updateUploadingFiles } = useUpdateFields(imageArr)\n\n  useEffect(() => {\n    isEmpty(imageArr) && !isFilesLoaded && dispatch(fetchPhotos())\n    setIsFilesLoaded(true)\n  }, [dispatch, imageArr, isFilesLoaded])\n\n  const galleryProps: GalleryProps = {\n    ...mainGalleryProps,\n    removeFromSelectedList: (index: number) => dispatch(removeFromDSelectedList(index)),\n    addToSelectedList: (index: number) => dispatch(addToDSelectedList(index)),\n    clearSelectedList: () => dispatch(clearDSelectedList()),\n    updateFiles: (tempPath: string) => updateUploadingFiles(tempPath),\n    isLoading: isGalleryLoading,\n    isMainPage: true,\n  }\n\n  const mainMenuProps = {\n    filesArr: imageArr,\n    selectedList: selectedList,\n    isExifLoading,\n    uniqKeywords,\n    sameKeywords,\n    openKeys: openMenus,\n    currentFolderPath,\n    clearSelectedList: () => dispatch(clearDSelectedList()),\n    selectAll: () => {\n      dispatch(selectAllD())\n      updateUploadingFiles('_', true)\n    },\n    updateOpenMenus: (value: string[]) => dispatch(updateDOpenMenus(value)),\n    updateKeywords: (): Promise<any> => updateUploadingFiles('_', true),\n    removeKeyword: (keyword: string) => {\n      const filesArrWithoutKeyword = removeIntersectingKeywords([keyword], imageArr)\n      dispatch(setDownloadingFiles(filesArrWithoutKeyword))\n    },\n    removeFiles: () => dispatch(clearDownloadingState()),\n  }\n\n  return (\n    <Layout>\n      <MainMenu {...mainMenuProps} />\n      <Layout>\n        <Content>\n          <CustomAlert message=\"Edit mode\" hide={!openMenus.includes('edit')} type=\"info\" />\n          <CustomAlert message=\"Template mode\" hide={!openMenus.includes('template')} type=\"success\" />\n          <PaginationMenu />\n          <Gallery {...galleryProps} />\n          <PaginationMenu />\n        </Content>\n      </Layout>\n    </Layout>\n  )\n}\n\nexport default MainPage\n","import React from 'react'\nimport { Route, Switch } from 'react-router-dom'\nimport { Layout } from 'antd'\n\nimport UploadPage from './app/Pages/UploadPage'\nimport MainPage from './app/Pages/MainPage'\nimport { Header } from './app/Components'\n\nfunction App() {\n  return (\n    <Layout>\n      <Header />\n      <Switch>\n        <Route exact path=\"/upload\" component={UploadPage} />\n        <Route component={MainPage} />\n      </Switch>\n    </Layout>\n  )\n}\n\nexport default App\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    /^127(?:\\.(?:25[0-5]|2[0-4]\\d|[01]?\\d{1,2})){3}$/.test(window.location.hostname)\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    // @ts-ignore\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && !contentType.includes('javascript'))) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import { combineReducers } from '@reduxjs/toolkit'\n\nimport foldersSliceReducer from '../reducers/foldersSlice-reducer'\nimport uploadSliceReducer from '../reducers/uploadSlice-reducer'\nimport mainPageSliceReducer from '../reducers/mainPageSlice-reducer'\n\nconst rootReducer = combineReducers({\n  folderReducer: foldersSliceReducer,\n  uploadReducer: uploadSliceReducer,\n  mainPageReducer: mainPageSliceReducer,\n})\n\nexport type RootState = ReturnType<typeof rootReducer>\n\nexport default rootReducer\n","import { configureStore, Action } from '@reduxjs/toolkit'\nimport { ThunkAction } from 'redux-thunk'\n\nimport rootReducer, { RootState } from './rootReducer'\n\nconst store = configureStore({\n  reducer: rootReducer,\n})\n\nexport type AppDispatch = typeof store.dispatch\n\nexport type AppThunk = ThunkAction<void, RootState, unknown, Action<string>>\nexport default store\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\n\nimport { Provider } from 'react-redux'\n\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport store from './redux/store/store'\n\nimport 'antd/dist/antd.css'\nimport 'react-image-gallery/styles/scss/image-gallery.scss'\nimport './styles/index.scss'\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.querySelector('#root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinner\":\"Gallery_spinner__yldZq\",\"wrapper\":\"Gallery_wrapper__2zUVk\",\"item\":\"Gallery_item__bdOQj\",\"imgInfo\":\"Gallery_imgInfo__n8Dj2\",\"imgName\":\"Gallery_imgName__tKtw7\",\"img\":\"Gallery_img__2JlhP\",\"iframeStyles\":\"Gallery_iframeStyles__3KqeT\",\"playButton\":\"Gallery_playButton__3bHoN\"};"],"sourceRoot":""}